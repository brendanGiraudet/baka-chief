@page "/recips/{Action}/{RecipId}"
@page "/recips/{Action}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<h3>@TitleRecip</h3>

<div class="recip-form-page">
    <div class="recip-form-page-container">


        <div class="recips-button">
            <Button Type="button" Text="Return to list" OnClickCallback="@(async () => await RedirectToRecipsPage())" />
        </div>

        <div class="recip-form">
            <EditForm Model="RecipsState.Value.Recip" OnValidSubmit="@SaveRecip">
                <DataAnnotationsValidator />

                @* Name *@
                <CustomInputText Label="Name" @bind-Value="@RecipsState.Value.Recip.Name" />

                @* PersonsNumber *@
                <CustomInputNumber Label="PersonsNumber" @bind-Value="@RecipsState.Value.Recip.PersonsNumber" />

                @* ImageFilePath *@
                <CustomInputText Label="Image" @bind-Value="@RecipsState.Value.Recip.ImageFilePath" />

                <h3>Product infos</h3>
                <ValidationMessage For="() => RecipsState.Value.Recip.RecipProductInfos" />

                <div class="selected-productInfo">
                    @if (RecipsState.Value.Recip.RecipProductInfos != null)
                    {
                        foreach (var recipProductInfo in RecipsState.Value.Recip.RecipProductInfos)
                        {
                            <RecipProductInfoDisplay ProductInfoName="@recipProductInfo.ProductInfo.product_name" Quantity="@recipProductInfo.Quantity" MeasureUnit="@recipProductInfo.MeasureUnit" IsRemovable="true" OnclickCallback="@( async () => await RemoveSelectedProductInfo(recipProductInfo))" />
                        }
                    }
                </div>

                <div class="productInfos">
                    @if (ProductInfosState.Value.ProductInfos != null)
                    {
                        var ProductInfos = ProductInfosState.Value.ProductInfos.Where(n => !RecipsState.Value.Recip.RecipProductInfos?.Any(s => s.ProductInfo.code == n.code) ?? false);

                        foreach (var ProductInfo in ProductInfos)
                        {
                            <RecipProductInfoDisplay ProductInfoName="@ProductInfo.product_name" @bind-Quantity="@RecipProductInfoModel.Quantity" @bind-MeasureUnit="@RecipProductInfoModel.MeasureUnit" IsAddable="true" OnclickCallback="@( async () => await AddSelectedProductInfo(ProductInfo))" />
                        }
                    }
                </div>

                <h3>Steps</h3>
                <ValidationMessage For="() => RecipsState.Value.Recip.RecipSteps" />

                <div class="selected-step">
                    @if (RecipsState.Value.Recip.RecipSteps != null)
                    {
                        foreach (var recipStep in RecipsState.Value.Recip.RecipSteps)
                        {
                            <RecipStepDisplay IsRemovable="true" Number="@recipStep.Number" Description="@recipStep.Description" OnclickCallback="@( async () => await RemoveSelectedStep(recipStep))" />
                        }
                    }
                </div>

                <div class="steps">

                    <RecipStepDisplay IsAddable="true" @bind-Number="RecipStepModel.Number" @bind-Description="RecipStepModel.Description" OnclickCallback="@( async () => await AddSelectedStep())" />
                </div>

                @* Submit *@
                <div>
                    <Button Type="submit" Text="Submit" />
                </div>

            </EditForm>

            @if (FormMode == Enums.FormMode.Update)
            {
                @* Remove recip button *@
                <div class="delete-recip">
                    <Button Type="button" Text="Remove" OnClickCallback="@(async () => await RemoveRecip(RecipsState.Value.Recip.Id))" ButtonStyle="Enums.Style.Error" />
                </div>
            }
        </div>
    </div>
</div>