@page "/nutriments"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<h3>Nutriments</h3>

@if (NutrimentsState.Value.IsLoading)
{
    <Loader />
}
else
{
    <AddButton OnClickCallback="@(async () => await ShowNutrimentForm(Enums.FormMode.Creation))" />

    <div class="add-nutriment-modal">

        <Modal Hidden="NutrimentsState.Value.IsNutrimentFormHidden" OnCloseCallback="CloseNutrimentForm" Title="@TitleNutrimentModal">
            <Content>
                <div class="nutriment-form">
                    <EditForm Model="NutrimentsState.Value.Nutriment" OnValidSubmit="@SaveNutriment">
                        <DataAnnotationsValidator />

                        @* Name *@
                        <CustomInputText Label="Name" @bind-Value="@NutrimentsState.Value.Nutriment.Name" />

                        @* ImageUrl *@
                        <CustomInputText Label="Image" @bind-Value="@NutrimentsState.Value.Nutriment.ImageUrl" />

                        @* Submit *@
                        <div>
                            <Button Type="submit" Text="Submit" />
                        </div>

                    </EditForm>

                    @if (FormMode == Enums.FormMode.Update)
                    {
                        @* Remove nutriment button *@
                        <div class="delete-nutriment">
                            <Button Type="button" Text="Remove" OnClickCallback="@(async () => await RemoveNutriment(NutrimentsState.Value.Nutriment.Id))" ButtonStyle="Enums.Style.Error" />
                        </div>
                    }
                </div>
            </Content>
        </Modal>
    </div>


    if (NutrimentsState.Value.Nutriments == null || NutrimentsState.Value.Nutriments.Count() == 0)
    {
        <div>Pas de nutriment</div>
    }
    else
    {
        <div class="nutriment-type-cards">
            @foreach (var nutrimentType in NutrimentsState.Value.Nutriments.OrderBy(n => n.Name))
            {
                <Card Title="@nutrimentType.Name" OnClickCallback="@(async () => await ShowNutrimentForm(Enums.FormMode.Update, nutrimentType.Id))">
                    <Content>
                        <div class="icon-card">
                            <img src="@nutrimentType.ImageUrl" alt="@nutrimentType.Name" />
                        </div>
                    </Content>
                </Card>
            }
        </div>
    }
}