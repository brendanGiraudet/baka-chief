@page "/ingredients"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<h3>Ingredient List</h3>

@if (IngredientState.Value.IsLoading)
{
    <Loader />
}
else
{
    <div class="addingredient-button">
        <Button Type="button" Text="Ajout" OnClickCallback="ShowNutrimentTypeForm" />
    </div>

    <div>

        <Modal Hidden="IngredientState.Value.IsIngredientFormHidden" OnCloseCallback="CloseNutrimentTypeForm">
            <Content>
                <div class="creation-form">
                    <EditForm Model="Model" OnValidSubmit="@Submit">
                        <DataAnnotationsValidator />

                        @* Name *@
                        <div>
                            <CustomInputText Label="Name" @bind-Value="@Model.Name" />
                        </div>

                        @* SvgImage *@
                        <div>
                            <CustomInputText Label="Image" @bind-Value="@Model.SvgImage" />
                        </div>

                        <div class="selected-nutriment">
                            @if (IngredientState.Value.SelectedNutrimentType != null)
                            {
                                foreach (var nutriment in IngredientState.Value.SelectedNutrimentType)
                                {
                                    <Tag Content="@nutriment.Name" IsRemovable="true" OnClickCallback="@(async() => await RemoveNutrimentType(nutriment))" />
                                }
                            }
                        </div>

                        <div class="nutriments">
                            @if (NutrimentTypeState.Value.NutrimentTypes != null)
                            {
                                var nutriments = NutrimentTypeState.Value.NutrimentTypes.Where(n => !IngredientState?.Value?.SelectedNutrimentType?.Contains(n)?? false);
                                foreach (var nutriment in nutriments)
                                {
                                    <Tag Content="@nutriment.Name" IsAddable="true" OnClickCallback="@( async () => await AddNutrimentType(nutriment))" />
                                }
                            }
                        </div>

                        @* Submit *@
                        <div>
                            <Button Type="submit" Text="Submit" />
                        </div>

                    </EditForm>
                </div>
            </Content>
        </Modal>
    </div>

    if (IngredientState.Value.Ingredients == null || IngredientState.Value.Ingredients.Count() == 0)
    {
        <div>Pas d'ingredients'</div>
    }
    else
    {
        <div class="ingredient-type-cards">
            @foreach (var ingredient in IngredientState.Value.Ingredients)
            {
                <Card Title="@ingredient.Name" OnClickCallback="async () => await RemoveIngredient(ingredient.Id)">
                    <Content>
                        <div class="ingredient-card">

                            <div class="image">@((MarkupString)ingredient.SvgImage)</div>

                            <div class="nutriments">
                                @foreach (var nutriment in ingredient.NutrimentTypes)
                                {
                                    <Tag Content="@nutriment.Name" />
                                }
                            </div>

                        </div>
                    </Content>
                </Card>
                
            }
        </div>
    }
}